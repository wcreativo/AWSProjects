version: '3.8'

services:
  # HelloProject Services
  helloproject-backend:
    build: ./HelloProject/backend
    container_name: helloproject-backend
    restart: unless-stopped
    env_file:
      - .env.helloproject
    volumes:
      - ./HelloProject/backend:/app
    networks:
      - helloproject-network
      - main-network

  helloproject-frontend:
    build: ./HelloProject/frontend
    container_name: helloproject-frontend
    restart: unless-stopped
    depends_on:
      - helloproject-backend
    networks:
      - helloproject-network

  helloproject-nginx:
    image: nginx:alpine
    container_name: helloproject-nginx
    restart: unless-stopped
    volumes:
      - ./HelloProject/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./HelloProject/nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - helloproject-frontend
      - helloproject-backend
    networks:
      - helloproject-network
      - main-network

  # EscapeRooms
  escaperooms-backend:
    build:
      context: ./EscapeRooms/backend
      dockerfile: Dockerfile
    container_name: escaperooms-backend
    restart: unless-stopped
    env_file:
      - .env.escaperooms
    volumes:
      - ./EscapeRooms/backend/logs:/app/logs
      - escaperooms_static:/app/staticfiles
    networks:
      - escape_rooms_network
      - main-network

  escaperooms-frontend:
    build:
      context: ./EscapeRooms/frontend
      dockerfile: Dockerfile
    env_file:
      - .env.escaperooms
    container_name: escaperooms-frontend
    restart: unless-stopped
    depends_on:
      - escaperooms-backend
    networks:
      - escape_rooms_network

  escaperooms-nginx:
    image: nginx:alpine
    container_name: escaperooms-nginx
    restart: unless-stopped
    volumes:
      - ./EscapeRooms/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./EscapeRooms/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - escaperooms-frontend
      - escaperooms-backend
    networks:
      - escape_rooms_network
      - main-network

  # Main Nginx Reverse Proxy
  main-nginx:
    image: nginx:alpine
    container_name: main-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - certbot_conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - helloproject-nginx
      - escaperooms-nginx
      - gemotorsports-nginx
    networks:
      - main-network

  # Certbot for SSL Certificate Management
  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: "no"  # Don't auto-restart, run on-demand only
    volumes:
      - certbot_conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./scripts:/scripts:ro
    networks:
      - main-network
    # No command specified - will be run manually via docker-compose run

  # Initialize certbot directory structure
  certbot-init:
    image: alpine:latest
    container_name: certbot-init
    restart: unless-stopped
    volumes:
      - ./certbot/www:/var/www/certbot
    command: >
      sh -c "
        echo 'Creating certbot directory structure...' &&
        mkdir -p /var/www/certbot/.well-known/acme-challenge &&
        chmod -R 755 /var/www/certbot &&
        echo 'test-file' > /var/www/certbot/.well-known/acme-challenge/test &&
        echo 'Certbot directories ready for SSL validation!' &&
        echo 'Initialization complete. Keeping container alive...' &&
        tail -f /dev/null
      "

  # Shared PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: shared-postgres
    restart: unless-stopped
    env_file:
      - .env.helloproject
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - main-network

volumes:
  postgres_data:
  certbot_conf:
  escaperooms_static:

networks:
  helloproject-network:
    driver: bridge
  escape_rooms_network:
    driver: bridge
  main-network:
    driver: bridge
