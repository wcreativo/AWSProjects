AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for multiple projects with Django Ninja and React'

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  
  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
    Description: EC2 instance type

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-IGW'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet'

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicRouteTable'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  # Security Groups
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP, HTTPS, and SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
          Description: Django development server
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
          Description: React development server
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-WebServerSG'

  # IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # EC2 Instance
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
        ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2023 AMI
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        IamInstanceProfile: !Ref EC2InstanceProfile
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            GroupSet:
              - !Ref WebServerSecurityGroup
            SubnetId: !Ref PublicSubnet
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y docker git
            systemctl start docker
            systemctl enable docker
            usermod -a -G docker ec2-user
            
            # Install Docker Compose
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            
            # Install Nginx
            yum install -y nginx
            systemctl start nginx
            systemctl enable nginx
            
            # Create application directories
            mkdir -p /opt/applications
            mkdir -p /opt/applications/logs
            chown -R ec2-user:ec2-user /opt/applications
            
            # Create log files for each project
            touch /opt/applications/logs/helloproject.log
            chown ec2-user:ec2-user /opt/applications/logs/*.log
            
            # Install certbot for SSL certificates
            yum install -y python3-pip
            pip3 install certbot-nginx
            
            # Install CloudWatch agent for monitoring
            yum install -y amazon-cloudwatch-agent
            
            # Create CloudWatch configuration
            cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'EOF'
            {
              "agent": {
                "metrics_collection_interval": 60,
                "run_as_user": "cwagent"
              },
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/nginx/access.log",
                        "log_group_name": "/aws/ec2/nginx-access",
                        "log_stream_name": "{instance_id}"
                      },
                      {
                        "file_path": "/var/log/nginx/error.log",
                        "log_group_name": "/aws/ec2/nginx-error",
                        "log_stream_name": "{instance_id}"
                      },
                      {
                        "file_path": "/opt/applications/logs/helloproject.log",
                        "log_group_name": "/aws/ec2/helloproject",
                        "log_stream_name": "{instance_id}"
                      }
                    ]
                  }
                }
              },
              "metrics": {
                "metrics_collected": {
                  "disk": {
                    "measurement": ["used_percent"],
                    "metrics_collection_interval": 60,
                    "resources": ["*"]
                  },
                  "mem": {
                    "measurement": ["mem_used_percent"],
                    "metrics_collection_interval": 60
                  },
                  "cpu": {
                    "measurement": ["cpu_usage_idle", "cpu_usage_iowait", "cpu_usage_user", "cpu_usage_system"],
                    "metrics_collection_interval": 60
                  }
                }
              }
            }
            EOF
            
            # Start CloudWatch agent
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
            systemctl start amazon-cloudwatch-agent
            systemctl enable amazon-cloudwatch-agent
            
            # Create deployment script for multi-project setup
            cat > /opt/applications/deploy-all.sh << 'DEPLOY_EOF'
            #!/bin/bash
            echo "Deploying all projects..."
            cd /opt/applications
            
            # Clone or update repositories
            if [ ! -d "AWSProjects" ]; then
                echo "Clone your repository here"
                # git clone https://github.com/your-username/AWSProjects.git
            fi
            
            # Deploy all projects
            cd AWSProjects
            docker-compose up -d
            
            echo "All projects deployed!"
            echo "URLs:"
            echo "  HelloProject: https://maialejandra.com"
            DEPLOY_EOF
            
            chmod +x /opt/applications/deploy-all.sh
            chown ec2-user:ec2-user /opt/applications/deploy-all.sh
            
            echo "Infrastructure setup completed!"
            echo "Multi-project infrastructure ready for:"
            echo "  HelloProject: https://maialejandra.com"
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 20
              VolumeType: gp3
              Encrypted: true
              DeleteOnTermination: true
        Monitoring: true
        Tags:
          - Key: Name
            Value: !Sub '${AWS::StackName}-WebServer'
          - Key: Project
            Value: "AWS-Multi-Projects"
          - Key: Projects
            Value: "HelloProject"
          - Key: Domains
            Value: "maialejandra.com"
          - Key: Environment
            Value: "Production"
          - Key: ManagedBy
            Value: "CloudFormation"

  # Elastic IP
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref WebServer
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ElasticIP'

Outputs:
  PublicIP:
    Description: Public IP address of the web server
    Value: !Ref ElasticIP
    Export:
      Name: !Sub '${AWS::StackName}-PublicIP'

  InstanceId:
    Description: Instance ID of the web server
    Value: !Ref WebServer
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'

  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref WebServerSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'
  
  HelloProjectURL:
    Description: URL for HelloProject (maialejandra.com)
    Value: !Sub 'https://maialejandra.com'
    Export:
      Name: !Sub '${AWS::StackName}-HelloProjectURL'

  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub 'ssh -i your-key.pem ec2-user@${ElasticIP}'
    Export:
      Name: !Sub '${AWS::StackName}-SSHCommand'
